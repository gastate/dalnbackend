---
swagger: "2.0"
info:
  version: "2018-04-10T15:18:02Z"
  title: "org.lambadaframework.thedaln-development"
host: "h10w14u1wd.execute-api.us-east-1.amazonaws.com"
basePath: "/development"
schemes:
  - "https"
paths:
  /admin/approve:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/updatePost:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/delete:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/email:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/remove:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/rejected:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/unapproved:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/reject:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /admin/unreject:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"

  /asset/apiupload:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /asset/read/{key}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "key"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.key: "method.request.path.key"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /asset/s3upload/{key}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "key"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.key: "method.request.path.key"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /asset/s3uploader:
      post:
        consumes:
          - "application/json"
        produces:
          - "application/json"
        responses:
          200:
            description: "200 response"
            headers:
              Access-Control-Allow-Origin:
                type: "string"
          201:
            description: "201 response"
          400:
            description: "400 response"
          301:
            description: "301 response"
          202:
            description: "202 response"
          500:
            description: "500 response"
          401:
            description: "401 response"
          302:
            description: "302 response"
          403:
            description: "403 response"
          404:
            description: "404 response"
        x-amazon-apigateway-integration:
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
          responses:
            403.*:
              statusCode: "403"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            500.*:
              statusCode: "500"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            401.*:
              statusCode: "401"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            default:
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin: "'*'"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            400.*:
              statusCode: "400"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            302.*:
              statusCode: "302"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            301.*:
              statusCode: "301"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            404.*:
              statusCode: "404"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            202.*:
              statusCode: "202"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            201.*:
              statusCode: "201"
              responseTemplates:
                application/json: "$input.json('$.entity')"
          passthroughBehavior: "never"
          httpMethod: "POST"
          requestTemplates:
            application/json:
              "{\n  \"package\": \"org.dalnservice.controller\",\n \
              \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
              ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
              \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
              \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
              \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
              #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
              \      #end\n}"
          type: "aws"
      options:
        consumes:
          - "application/json"
        produces:
          - "application/json"
        responses:
          200:
            description: "200 response"
            schema:
              $ref: "#/definitions/Empty"
            headers:
              Access-Control-Allow-Origin:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Headers:
                type: "string"
        x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
          passthroughBehavior: "when_no_match"
          requestTemplates:
            application/json: '{"statusCode": 200}'
          type: "mock"
  /asset/s3AdminUpload:
      post:
        consumes:
          - "application/json"
        produces:
          - "application/json"
        responses:
          200:
            description: "200 response"
            headers:
              Access-Control-Allow-Origin:
                type: "string"
          201:
            description: "201 response"
          400:
            description: "400 response"
          301:
            description: "301 response"
          202:
            description: "202 response"
          500:
            description: "500 response"
          401:
            description: "401 response"
          302:
            description: "302 response"
          403:
            description: "403 response"
          404:
            description: "404 response"
        x-amazon-apigateway-integration:
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
          responses:
            403.*:
              statusCode: "403"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            500.*:
              statusCode: "500"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            401.*:
              statusCode: "401"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            default:
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin: "'*'"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            400.*:
              statusCode: "400"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            302.*:
              statusCode: "302"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            301.*:
              statusCode: "301"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            404.*:
              statusCode: "404"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            202.*:
              statusCode: "202"
              responseTemplates:
                application/json: "$input.json('$.entity')"
            201.*:
              statusCode: "201"
              responseTemplates:
                application/json: "$input.json('$.entity')"
          passthroughBehavior: "never"
          httpMethod: "POST"
          requestTemplates:
            application/json:
              "{\n  \"package\": \"org.dalnservice.controller\",\n \
              \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
              ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
              \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
              \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
              \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
              #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
              \      #end\n}"
          type: "aws"
      options:
        consumes:
          - "application/json"
        produces:
          - "application/json"
        responses:
          200:
            description: "200 response"
            schema:
              $ref: "#/definitions/Empty"
            headers:
              Access-Control-Allow-Origin:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Headers:
                type: "string"
        x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
          passthroughBehavior: "when_no_match"
          requestTemplates:
            application/json: '{"statusCode": 200}'
          type: "mock"
  /asset/test:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/all:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/create:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/dalnold/{dalnId}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "dalnId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.dalnId: "method.request.path.dalnId"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/get:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
  /posts/get/{postId}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.postId: "method.request.path.postId"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/getdev/{postId}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.postId: "method.request.path.postId"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/random/{size}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "size"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.size: "method.request.path.size"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/search-engine-size:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/search/{query}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "query"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.query: "method.request.path.query"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/search/{query}/{pageSize}/{start}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "query"
          in: "path"
          required: true
          type: "string"
        - name: "start"
          in: "path"
          required: true
          type: "string"
        - name: "pageSize"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.start: "method.request.path.start"
          integration.request.path.pageSize: "method.request.path.pageSize"
          integration.request.path.query: "method.request.path.query"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/search/{query}/{pageSize}/{start}/{field}/{order}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "query"
          in: "path"
          required: true
          type: "string"
        - name: "start"
          in: "path"
          required: true
          type: "string"
        - name: "field"
          in: "path"
          required: true
          type: "string"
        - name: "order"
          in: "path"
          required: true
          type: "string"
        - name: "pageSize"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.start: "method.request.path.start"
          integration.request.path.order: "method.request.path.order"
          integration.request.path.pageSize: "method.request.path.pageSize"
          integration.request.path.field: "method.request.path.field"
          integration.request.path.query: "method.request.path.query"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
  /posts/size/{pageSize}/page/{page}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "page"
          in: "path"
          required: true
          type: "string"
        - name: "pageSize"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        301:
          description: "301 response"
        202:
          description: "202 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        302:
          description: "302 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:616103791264:function:thedaln-development-development-LambdaFunction-HVCPH974TKAV:0-0-6/invocations"
        responses:
          403.*:
            statusCode: "403"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          401.*:
            statusCode: "401"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          302.*:
            statusCode: "302"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          301.*:
            statusCode: "301"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          202.*:
            statusCode: "202"
            responseTemplates:
              application/json: "$input.json('$.entity')"
          201.*:
            statusCode: "201"
            responseTemplates:
              application/json: "$input.json('$.entity')"
        requestParameters:
          integration.request.path.page: "method.request.path.page"
          integration.request.path.pageSize: "method.request.path.pageSize"
        passthroughBehavior: "never"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            "{\n  \"package\": \"org.dalnservice.controller\",\n \
            \ \"pathtemplate\": \"$context.resourcePath\",\n  \"method\": \"$context.httpMethod\"\
            ,\n  \"requestbody\": \"$util.escapeJavaScript($input.json('$')).replaceAll(\"\
            \\\\'\",\"'\"))\",\n      #foreach($elem in $input.params().keySet())\n\
            \        \"$elem\": {\n            #foreach($innerElem in $input.params().get($elem).keySet())\n\
            \        \"$innerElem\": \"$util.urlDecode($input.params().get($elem).get($innerElem))\"\
            #if($foreach.hasNext),#end\n      #end\n        }#if($foreach.hasNext),#end\n\
            \      #end\n}"
        type: "aws"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: "mock"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
